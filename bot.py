import logging
import requests
from bs4 import BeautifulSoup
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# üîë Token bot Telegram (thay b·∫±ng token c·ªßa b·∫°n)
TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# ======================= C√ÅC L·ªÜNH =======================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã Xin ch√†o! T√¥i l√† bot t·∫£i video.\n"
        "G√µ /help ƒë·ªÉ xem h∆∞·ªõng d·∫´n."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìå C√°c l·ªánh c√≥ th·ªÉ d√πng:\n"
        "/tiktok <link>\n"
        "/fb <link>\n"
        "/yt <link>\n"
        "Bot s·∫Ω tr·∫£ v·ªÅ link t·∫£i video."
    )

# ======================= H√ÄM L·∫§Y LINK =======================

def get_download_link(url):
    """
    D√πng snapvideo.co ho·∫∑c taivideo.vn ƒë·ªÉ l·∫•y link t·∫£i video.
    ƒê√¢y ch·ªâ l√† v√≠ d·ª• scraping ƒë∆°n gi·∫£n -> C√≥ th·ªÉ thay ƒë·ªïi t√πy site.
    """
    try:
        r = requests.get("https://taivideo.vn", params={"url": url}, timeout=10)
        soup = BeautifulSoup(r.text, "html.parser")

        # T√¨m th·∫ª <a> c√≥ ch·ª©a link video
        a_tag = soup.find("a", href=True)
        if a_tag:
            return a_tag["href"]
        return None
    except Exception as e:
        print("Error:", e)
        return None

# ======================= L·ªÜNH CH√çNH =======================

async def tiktok(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p link TikTok.\nV√≠ d·ª•: /tiktok https://...")
        return
    url = context.args[0]
    dl = get_download_link(url)
    if dl:
        await update.message.reply_text(f"‚úÖ Link t·∫£i: {dl}")
    else:
        await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c link. Th·ª≠ l·∫°i sau.")

async def fb(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p link Facebook.\nV√≠ d·ª•: /fb https://...")
        return
    url = context.args[0]
    dl = get_download_link(url)
    if dl:
        await update.message.reply_text(f"‚úÖ Link t·∫£i: {dl}")
    else:
        await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c link. Th·ª≠ l·∫°i sau.")

async def yt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("‚ö†Ô∏è B·∫°n c·∫ßn nh·∫≠p link YouTube.\nV√≠ d·ª•: /yt https://...")
        return
    url = context.args[0]
    dl = get_download_link(url)
    if dl:
        await update.message.reply_text(f"‚úÖ Link t·∫£i: {dl}")
    else:
        await update.message.reply_text("‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c link. Th·ª≠ l·∫°i sau.")

# ======================= MAIN =======================

def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("tiktok", tiktok))
    app.add_handler(CommandHandler("fb", fb))
    app.add_handler(CommandHandler("yt", yt))

    print("ü§ñ Bot ƒëang ch·∫°y...")
    app.run_polling()

if __name__ == "__main__":
    main()
